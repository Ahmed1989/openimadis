/**
 * openImaDis - Open Image Discovery: Image Life Cycle Management Software
 * Copyright (C) 2011-2016  Strand Life Sciences
 *   
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ImageSpace.java
 *
 * AVADIS Image Management System
 *
 * Copyright 2011-2012 by Strand Life Sciences
 * 5th Floor, Kirloskar Business Park, 
 * Bellary Road, Hebbal
 * Bangalore 560024
 * Karnataka, India
 * 
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Strand Life Sciences., ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Strand Life Sciences.
 */

package com.strandgenomics.imaging.iclient;

import java.rmi.RemoteException;
import java.util.List;
import java.util.Set;

import com.strandgenomics.imaging.icore.SearchCondition;

/**
 * The main class representing the Enterprise IMG Server at the client side
 * @author arunabha
 */
public interface ImageSpace {
	
	/**
     * returns the host address (of Enterprise IMG Server) connected to, 
     * null otherwise
     */
    public String getHost();

    /**
     * @return the server port number connected to, -1 otherwise
     */
    public int getPort();

    /**
     * Enterprise IMG Server supports authentication.
     * @returns the logged user name
     */
    public String getUser();

	/**
	 * returns the access key associated with active user session. the access
	 * key is generated by server for given authcode, user and client id. access
	 * key is unique for every login. this api fascilitates transfer of user
	 * session.
	 * 
	 * @return access key
	 */
	public String getAccessKey();
	
	/**
	 * this call is equivalent to login call but with the given user session 
	 * @param useSSL true if ssl is used
	 * @param host host name of the server
	 * @param port port name of the server
	 * @param accessKey associated with the session
	 * @return true if successful, false otherwise
	 */
	public boolean setAccessKey(boolean useSSL, String host, int port, String accessKey);

    /**
     * Logs in the user to Enterprise IMG Server
     * @param host the IP address of the Enterprise IMG Server machine
     * @param port the port to use
     * @param appID Client/Application Identifier - obtained after registering the client/Application with iManage (web client) 
     * @param authCode the authorization grant obtained by the user for the above mentioned clientID (again using iManage)
     * @throws AuthenticationException
     */
    public boolean login(boolean useSSL, String host, int port, String appID, String authCode) 
    		throws AuthenticationException;
    
    /**
     * Logs out from the iManager server by surrending the underlying acess-token
     */
    public void logout();
    
    /**
     * The list of active projects that the connected user have permission to read
     * @return list of active projects that the connected user have permission to read
     */
    public List<Project> getActiveProjects();
    /**
     * The list of active projects that the connected user have permission to upload
     * @return list of active projects that the connected user have permission to upload
     */
    public List<Project> getActiveProjectsUpload();
    
    /**
     * The list of active projects' names that the connected user have permission to read
     * @return list of active projects that the connected user have permission to upload
     */
    public List<String> getActiveProjectsNames();
    
    /**
     * The list of archived projects that the connected user have permission to browse, may be null otherwise
     * @return list of active projects that the connected user have permission to read
     */
    public List<Project> getArchivedProjects();
    
    /**
     * find the specified project
     * @param projectName project name
     * @return project 
     */
    public Project findProject(String projectName);
    
    /**
     * Search AVADIS IMG Server for records matching the specified search text
     * @param freeText the search text
     * @param projectNames list of projects where the search is restricted (can be null)
     * @param filters list of search conditions
     * @param maxResult maximum number of result to fetch
     * @return a list of records (their GUIDs)
     * @throws RemoteException
     */
    public long[] search(String freeText, Set<String> projectNames, Set<SearchCondition> filters, int maxResult);
    
    
	/**
	 * Find the record for the specified global universal identifier for record
	 * @param guid the universal identifier for records
	 * @return the record record for the specified id
	 */
	public Record findRecordForGUID(long guid);
	
	/**
	 * Find the record for the specified global universal identifier for record
	 * @param guid the universal identifier for records
	 * @return the record
	 */
	public Record[] findRecordForGUIDs(long[] guid);

    /**
     * list all the available acquisition profiles
     * @return available acquisition profiles
     */
    public abstract List<AcquisitionProfile> listAcquisitionProfiles();
    
    /**
     * returns name of the microscope attached to current machine
     * @return name of the microscope attached to current machine
     */
    public abstract String getMicroscope();
    
    /**
     * request acquisition license for current machine and user
     * @param user specified user
     * @return true if license is granted, false otherwise
     */
    public abstract boolean requestAcquisitionLicense(String user);
    
    /**
     * surrender acquisition license from current machine/user
     */
    public abstract void surrenderAcquisitionLicense();
}
